// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/protobuf.proto

/*
Package multiplier is a generated protocol buffer package.

It is generated from these files:
	proto/protobuf.proto

It has these top-level messages:
	MultRequest
	MultResponse
*/
package multiplier

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MultRequest struct {
	Fnum int32 `protobuf:"varint,1,opt,name=fnum" json:"fnum,omitempty"`
	Snum int32 `protobuf:"varint,2,opt,name=snum" json:"snum,omitempty"`
}

func (m *MultRequest) Reset()                    { *m = MultRequest{} }
func (m *MultRequest) String() string            { return proto.CompactTextString(m) }
func (*MultRequest) ProtoMessage()               {}
func (*MultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MultRequest) GetFnum() int32 {
	if m != nil {
		return m.Fnum
	}
	return 0
}

func (m *MultRequest) GetSnum() int32 {
	if m != nil {
		return m.Snum
	}
	return 0
}

type MultResponse struct {
	MulResult int32 `protobuf:"varint,1,opt,name=mul_result,json=mulResult" json:"mul_result,omitempty"`
}

func (m *MultResponse) Reset()                    { *m = MultResponse{} }
func (m *MultResponse) String() string            { return proto.CompactTextString(m) }
func (*MultResponse) ProtoMessage()               {}
func (*MultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MultResponse) GetMulResult() int32 {
	if m != nil {
		return m.MulResult
	}
	return 0
}

func init() {
	proto.RegisterType((*MultRequest)(nil), "multiplier.MultRequest")
	proto.RegisterType((*MultResponse)(nil), "multiplier.MultResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MultipleService service

type MultipleServiceClient interface {
	Multiply(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultResponse, error)
}

type multipleServiceClient struct {
	cc *grpc.ClientConn
}

func NewMultipleServiceClient(cc *grpc.ClientConn) MultipleServiceClient {
	return &multipleServiceClient{cc}
}

func (c *multipleServiceClient) Multiply(ctx context.Context, in *MultRequest, opts ...grpc.CallOption) (*MultResponse, error) {
	out := new(MultResponse)
	err := grpc.Invoke(ctx, "/multiplier.MultipleService/Multiply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MultipleService service

type MultipleServiceServer interface {
	Multiply(context.Context, *MultRequest) (*MultResponse, error)
}

func RegisterMultipleServiceServer(s *grpc.Server, srv MultipleServiceServer) {
	s.RegisterService(&_MultipleService_serviceDesc, srv)
}

func _MultipleService_Multiply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultipleServiceServer).Multiply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/multiplier.MultipleService/Multiply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultipleServiceServer).Multiply(ctx, req.(*MultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MultipleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "multiplier.MultipleService",
	HandlerType: (*MultipleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Multiply",
			Handler:    _MultipleService_Multiply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/protobuf.proto",
}

func init() { proto.RegisterFile("proto/protobuf.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x07, 0x93, 0x49, 0xa5, 0x69, 0x7a, 0x60, 0x86, 0x10, 0x57, 0x6e, 0x69, 0x4e, 0x49,
	0x66, 0x41, 0x4e, 0x66, 0x6a, 0x91, 0x92, 0x29, 0x17, 0xb7, 0x6f, 0x69, 0x4e, 0x49, 0x50, 0x6a,
	0x61, 0x69, 0x6a, 0x71, 0x89, 0x90, 0x10, 0x17, 0x4b, 0x5a, 0x5e, 0x69, 0xae, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x6b, 0x10, 0x98, 0x0d, 0x12, 0x2b, 0x06, 0x89, 0x31, 0x41, 0xc4, 0x40, 0x6c, 0x25,
	0x5d, 0x2e, 0x1e, 0x88, 0xb6, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x59, 0x2e, 0x90, 0xa1,
	0xf1, 0x45, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x50, 0xdd, 0x9c, 0xb9, 0xa5, 0x39, 0x41, 0x60, 0x01,
	0xa3, 0x00, 0x2e, 0x7e, 0x5f, 0x88, 0x9d, 0xa9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42,
	0xb6, 0x5c, 0x1c, 0x50, 0xa1, 0x4a, 0x21, 0x71, 0x3d, 0x84, 0x8b, 0xf4, 0x90, 0x9c, 0x23, 0x25,
	0x81, 0x29, 0x01, 0xb1, 0x30, 0x89, 0x0d, 0xec, 0x15, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xe5, 0x3d, 0x2a, 0xf2, 0xe2, 0x00, 0x00, 0x00,
}
